[{"C:\\Users\\James\\Development\\offlinetv\\src\\index.tsx":"1","C:\\Users\\James\\Development\\offlinetv\\src\\reportWebVitals.ts":"2","C:\\Users\\James\\Development\\offlinetv\\src\\App.tsx":"3","C:\\Users\\James\\Development\\offlinetv\\src\\services\\memberService.tsx":"4","C:\\Users\\James\\Development\\offlinetv\\src\\components\\memberList.tsx":"5","C:\\Users\\James\\Development\\offlinetv\\src\\utils.ts":"6","C:\\Users\\James\\Development\\offlinetv\\src\\services\\twitchService.tsx":"7","C:\\Users\\James\\Development\\offlinetv\\src\\components\\loading.tsx":"8","C:\\Users\\James\\Development\\offlinetv\\src\\components\\refresh.tsx":"9","C:\\Users\\James\\Development\\offlinetv\\src\\components\\masthead.tsx":"10","C:\\Users\\James\\Development\\offlinetv\\src\\types\\Theme.ts":"11","C:\\Users\\James\\Development\\offlinetv\\src\\models\\themes.ts":"12","C:\\Users\\James\\Development\\offlinetv\\src\\components\\avatar.tsx":"13","C:\\Users\\James\\Development\\offlinetv\\src\\components\\name.tsx":"14","C:\\Users\\James\\Development\\offlinetv\\src\\components\\channel.tsx":"15","C:\\Users\\James\\Development\\offlinetv\\src\\components\\uptime.tsx":"16","C:\\Users\\James\\Development\\offlinetv\\src\\components\\footer.tsx":"17"},{"size":556,"mtime":1610779886982,"results":"18","hashOfConfig":"19"},{"size":425,"mtime":499162500000,"results":"20","hashOfConfig":"19"},{"size":1327,"mtime":1610864622664,"results":"21","hashOfConfig":"19"},{"size":96,"mtime":1610759720864,"results":"22","hashOfConfig":"19"},{"size":6708,"mtime":1611023506022,"results":"23","hashOfConfig":"19"},{"size":518,"mtime":1610359918012,"results":"24","hashOfConfig":"19"},{"size":565,"mtime":1611023679684,"results":"25","hashOfConfig":"19"},{"size":459,"mtime":1610589611502,"results":"26","hashOfConfig":"19"},{"size":278,"mtime":1610871224024,"results":"27","hashOfConfig":"19"},{"size":416,"mtime":1610778695773,"results":"28","hashOfConfig":"19"},{"size":85,"mtime":1610849897625,"results":"29","hashOfConfig":"19"},{"size":461,"mtime":1610849985763,"results":"30","hashOfConfig":"19"},{"size":498,"mtime":1610865268313,"results":"31","hashOfConfig":"19"},{"size":432,"mtime":1610865304892,"results":"32","hashOfConfig":"19"},{"size":622,"mtime":1610865525321,"results":"33","hashOfConfig":"19"},{"size":650,"mtime":1610864093161,"results":"34","hashOfConfig":"19"},{"size":979,"mtime":1610864646661,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"1lmqwxs",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"38"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"C:\\Users\\James\\Development\\offlinetv\\src\\index.tsx",[],["73","74"],"C:\\Users\\James\\Development\\offlinetv\\src\\reportWebVitals.ts",[],"C:\\Users\\James\\Development\\offlinetv\\src\\App.tsx",[],"C:\\Users\\James\\Development\\offlinetv\\src\\services\\memberService.tsx",[],"C:\\Users\\James\\Development\\offlinetv\\src\\components\\memberList.tsx",["75","76","77"],"import * as React from 'react';\r\nimport { Stream, Streamer } from '../types/Stream';\r\nimport { pause, mySort } from '../utils';\r\nimport { getMembers } from '../services/memberService';\r\nimport { getStreamer, getStream } from '../services/twitchService';\r\nimport Refresh from './refresh';\r\nimport Loading from './loading';\r\n// import _ from 'lodash';\r\nimport Avatar from './avatar';\r\nimport Name from './name';\r\nimport Channel from './channel';\r\nimport Uptime from './uptime';\r\n\r\nexport interface MemberListProps {\r\n}\r\n \r\nexport interface MemberListState {\r\n  loading: boolean,\r\n  refreshing: boolean,\r\n  members: Array<any>,\r\n}\r\n\r\nclass MemberList extends React.Component<MemberListProps, MemberListState> {\r\n  constructor(props: MemberListProps) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      loading: true,\r\n      refreshing: false,\r\n      members: []\r\n    };\r\n\r\n    this.populateMembers = this.populateMembers.bind(this);\r\n    this.autoRefresh = this.autoRefresh.bind(this);\r\n  }\r\n  \r\n  _isMounted = false;\r\n  _intervalID: any;\r\n  _interval: number = 60000; // Milliseconds to refresh content.\r\n\r\n  componentWillUnmount() {\r\n    this._isMounted = false;\r\n\r\n    // if (this._intervalID !== null && this._intervalID !== undefined) {\r\n    //   clearInterval(this._intervalID);\r\n    // }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    console.log(\"Mounting....\");\r\n    this.populateMembers();\r\n\r\n    // if (this._intervalID) clearInterval(this._intervalID);\r\n    // this._intervalID = setInterval(this.autoRefresh, this._interval);\r\n  }\r\n\r\n  async autoRefresh() {\r\n    if (this._isMounted) this.setState({ refreshing: true });\r\n    await pause(4.5);\r\n    this.populateMembers();\r\n  }\r\n\r\n  // TODO: Refactor to be more abstract. Move to Node backend.\r\n  async getAPI(members: any) {\r\n    // for (let i=0; i<members.length; i++) {\r\n    for (let i=0; i<3; i++) {\r\n      if (members[i].stream.label.toLowerCase() === \"twitch\") {\r\n        try {\r\n          const memberID = members[i].stream.id;\r\n          const memberAlias = members[i].alias;\r\n          console.log(`${memberID}: ${memberAlias}`);\r\n\r\n          // Get live stream if available.\r\n          let streamData: any = await getStream(memberID);\r\n          const streamResponse = streamData.status; // 200\r\n          streamData = streamData.data.data[0];\r\n\r\n          // Skip the rest of the loop if streamer isn't live.\r\n          if (streamData === undefined) {\r\n            console.log(`Skipping streamer: ${memberAlias}!!!!!!`);\r\n            members[i].stream.live = false;\r\n            members[i].api = {};\r\n            continue;\r\n          }\r\n\r\n          // Get streamer info if available\r\n          let streamerData: any = await getStreamer(memberID);\r\n          const streamerResponse = streamerData.status; // 200\r\n          streamerData = streamerData.data.data[0];\r\n          \r\n          // Initialize object to merge with members.api.\r\n          let stream: Stream = {};\r\n\r\n          // Set live stream data.\r\n          if (streamData !== undefined) {\r\n            stream.viewers = streamData.viewer_count;\r\n            stream.game = streamData.game_name;\r\n            stream.lastStream = streamData.started_at;\r\n            stream.title = streamData.title;\r\n            members[i].stream.live = true;\r\n          }\r\n\r\n          // Set profile URL.\r\n          if (streamerData !== undefined) {\r\n            stream.logo = streamData.profile_image_url;\r\n          }\r\n          \r\n          members[i].api = { ...members[i].api,  ...stream };\r\n          console.log(`Merged ${memberAlias}..........`);\r\n        } catch (error) {\r\n          console.error(\"error\", error);\r\n        }\r\n      } else {\r\n        console.log(\"Skipping non-Twitch streamers...\");\r\n      }\r\n    }\r\n\r\n    return members;\r\n  }\r\n\r\n  async populateMembers() {\r\n    try {\r\n      this._isMounted = true;\r\n\r\n      // await pause(1.5);\r\n\r\n      // Get all members\r\n      let members = await getMembers();\r\n\r\n      // Use API here to merge data into members\r\n      members = await this.getAPI(members);\r\n      console.log(\"members\", members);\r\n\r\n      // Sort\r\n      // Get live members\r\n      let liveMembers = members.filter((member) => member.stream.live === true);\r\n      // Sort live members\r\n      mySort(liveMembers, \"api\", \"viewers\");\r\n      // Remove non-live members\r\n      members = members.filter((member) => member.stream.live === false);\r\n      // Sort non-live members by followers\r\n      mySort(members, \"api\", \"followers\");\r\n      // Merge live and non-live members\r\n      members = [ ...liveMembers, ...members ];\r\n\r\n      if (this._isMounted) {\r\n        console.log(\"Mounted!\");\r\n        this.setState({ members, loading: false, refreshing: false });\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  render() { \r\n    const { loading, refreshing, members } = this.state;\r\n\r\n    return (\r\n      <div className=\"content\">\r\n        <div className=\"notification\">\r\n          {/* <div className=\"message\">Welcome!</div> */}\r\n          { (!loading && refreshing) && <Refresh refreshing={refreshing}/>}\r\n        </div>\r\n\r\n        <Loading loading={loading}>\r\n          {members.map((member: any, index) => {\r\n            const { stream, api } = member;\r\n            const { live } = stream;\r\n            const { title, lastStream } = api;\r\n\r\n            return (\r\n              <Channel key={index} member={member}>\r\n                <Avatar member={member}>\r\n                  {/* <div className=\"avatar-ring\"></div> */}\r\n                  <img\r\n                    className={stream.label.toLowerCase()}\r\n                    src={api.logo || \"/avatars/\" + stream.avatar}\r\n                    alt={member.alias.charAt(0)}\r\n                  />\r\n                </Avatar>\r\n              \r\n                <div className=\"details\">\r\n                  <div className=\"ng\">\r\n                    <Name member={member} />\r\n                    <div className=\"game\">\r\n                      {live && api.game}\r\n                    </div>\r\n                  </div>\r\n                  \r\n                  <div className=\"stream-title-p\">\r\n                    <div className=\"stream-title\" title={title}>\r\n                      {live && title}\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"view-count-p\">\r\n                    <div className=\"view-count\">\r\n                      {live && (api.viewers && api.viewers.toLocaleString())}\r\n                    </div>\r\n                    <Uptime lastStream={lastStream} />\r\n                  </div>\r\n                </div>\r\n              </Channel>\r\n            );\r\n          })}\r\n        </Loading>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n \r\nexport default MemberList;","C:\\Users\\James\\Development\\offlinetv\\src\\utils.ts",[],"C:\\Users\\James\\Development\\offlinetv\\src\\services\\twitchService.tsx",[],"C:\\Users\\James\\Development\\offlinetv\\src\\components\\loading.tsx",[],"C:\\Users\\James\\Development\\offlinetv\\src\\components\\refresh.tsx",[],"C:\\Users\\James\\Development\\offlinetv\\src\\components\\masthead.tsx",[],"C:\\Users\\James\\Development\\offlinetv\\src\\types\\Theme.ts",[],["78","79"],"C:\\Users\\James\\Development\\offlinetv\\src\\models\\themes.ts",[],"C:\\Users\\James\\Development\\offlinetv\\src\\components\\avatar.tsx",[],"C:\\Users\\James\\Development\\offlinetv\\src\\components\\name.tsx",[],"C:\\Users\\James\\Development\\offlinetv\\src\\components\\channel.tsx",[],"C:\\Users\\James\\Development\\offlinetv\\src\\components\\uptime.tsx",[],"C:\\Users\\James\\Development\\offlinetv\\src\\components\\footer.tsx",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":2,"column":18,"nodeType":"86","messageId":"87","endLine":2,"endColumn":26},{"ruleId":"84","severity":1,"message":"88","line":75,"column":17,"nodeType":"86","messageId":"87","endLine":75,"endColumn":31},{"ruleId":"84","severity":1,"message":"89","line":88,"column":17,"nodeType":"86","messageId":"87","endLine":88,"endColumn":33},{"ruleId":"80","replacedBy":"90"},{"ruleId":"82","replacedBy":"91"},"no-native-reassign",["92"],"no-negated-in-lhs",["93"],"@typescript-eslint/no-unused-vars","'Streamer' is defined but never used.","Identifier","unusedVar","'streamResponse' is assigned a value but never used.","'streamerResponse' is assigned a value but never used.",["92"],["93"],"no-global-assign","no-unsafe-negation"]